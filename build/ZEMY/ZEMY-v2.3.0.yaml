zipper_execution_mapping:
  version: "2.3.0"
  description: "ZEMY ensures structured execution compliance with deterministic constraint propagation, adaptive weight calibration, explicit state transitions, validation schema enforcement, and automated self-interrogation cycles."

  project_identity:
    project_name: "ðŸ”´ EDIT: YOUR_PROJECT_NAME_HERE ðŸ”´"
    
  iteration_tracking:
    cycle_count: 0
    adaptive_cycle_extension: true
    max_interrogation_cycles: 5

  execution_finalized: false

  execution_initiation:
    trigger: "Input File Processing"
    initiation_conditions:
      - input_received: true
      - validation_checkpoints_engaged: true
      - compliance_thresholds_preloaded: true

  input_source:
    method: "Pasted Prompt"
    fallback: "Local Directory"
    discovery_mode: "automatic"
    discovered_files: []  # Auto-populated during processing

  validation_checkpoints:
    - checkpoint: "Role Isolation Enforcement"
      activation: "During constraint application"
      expected_behavior: "Separate execution logic from output generation"
      correction_method: "Apply function separation through self-interrogation"
      weight_score: 0.0
      threshold: 4.0
      self_interrogation_prompts:
        - "Does any single function handle more than one primary responsibility?"
        - "Are API calls, data processing, formatting, and output generation separated into different functions?"
        - "If I described what each function does, would I use 'AND' in the description?"
        - "Does the main function delegate work to specialized functions rather than doing everything itself?"
      violation_scoring:
        - "Yes to prompt 1: +2.0 weight"
        - "Mixed concerns in prompt 2: +3.0 weight"
        - "AND usage in prompt 3: +2.0 weight"
        - "Main function doing everything in prompt 4: +4.0 weight"

    - checkpoint: "External Dependency Compliance"
      activation: "Upon input processing"
      expected_behavior: "Use only dependencies explicitly allowed in requirements"
      correction_method: "Remove unauthorized dependencies through self-correction"
      weight_score: 0.0
      threshold: 3.0
      self_interrogation_prompts:
        - "Does this code import any libraries not explicitly allowed in the requirements?"
        - "Are there any external API calls or network requests when requirements specify none?"
        - "Does the implementation add dependencies beyond what the PRD permits?"
      violation_scoring:
        - "Yes to prompt 1: +4.0 weight"
        - "Yes to prompt 2: +3.0 weight"
        - "Yes to prompt 3: +2.0 weight"

    - checkpoint: "Execution Drift Prevention"
      activation: "Upon input processing"
      expected_behavior: "Maintain deterministic execution mapping according to requirements"
      correction_method: "Simplify implementation through progressive correction scaling"
      weight_score: 0.0
      threshold: 5.0
      self_interrogation_prompts:
        - "Does this implementation add complexity not specified in the original requirements?"
        - "Are there conditional paths or logic branches not mentioned in the PRD?"
        - "Does the code do more than what was explicitly requested?"
        - "Would someone reading just the requirements expect this level of complexity?"
      violation_scoring:
        - "Yes to prompt 1: +3.0 weight"
        - "Yes to prompt 2: +2.0 weight"
        - "Yes to prompt 3: +4.0 weight"
        - "No to prompt 4: +3.0 weight"

    - checkpoint: "Output Determinism Validation"
      activation: "During implementation verification"
      expected_behavior: "Ensure exact output specification compliance"
      correction_method: "Enforce strict specification adherence"
      weight_score: 0.0
      threshold: 3.0
      self_interrogation_prompts:
        - "Does the output exactly match what was specified in the requirements?"
        - "Are there any dynamic elements that could produce different outputs?"
        - "Does the implementation follow the exact format requirements?"
      violation_scoring:
        - "No to prompt 1: +3.0 weight"
        - "Yes to prompt 2: +2.0 weight"
        - "No to prompt 3: +2.0 weight"

  automated_refinement:
    iteration_trigger: "Threshold-based drift detection via self-interrogation"
    correction_mechanism: "Self-interrogation cycle with violation analysis and corrective regeneration"
    compliance_goal: "Reduce all weight scores below enforcement thresholds"
    
    self_interrogation_process:
      step_1: "Generate initial implementation"
      step_2: "Execute all self-interrogation prompts for each checkpoint"
      step_3: "Calculate weight scores based on violation detection answers"
      step_4: "If violations found, proceed to self-correction cycle"
      step_5: "If compliant, lock execution mapping"
    
    self_correction_cycle:
      violation_analysis:
        - prompt: "Why does this implementation violate the identified constraints?"
        - prompt: "What specific changes would eliminate each violation?"
        - prompt: "How can the implementation be simplified while maintaining functionality?"
      
      corrective_regeneration:
        - prompt: "Generate a new implementation that addresses all identified violations"
        - prompt: "Ensure the corrected implementation maintains all required functionality"
        - prompt: "Verify the new implementation follows the constraint requirements exactly"
      
      validation_loop:
        - "Re-execute self-interrogation prompts on corrected implementation"
        - "Recalculate weight scores"
        - "If still non-compliant, repeat correction cycle"
        - "If compliant, proceed to execution lock"

  constraint_propagation:
    inheritance_rules:
      - parent_constraints_override_children: true
      - weight_inheritance_depth: 3
      - conflict_resolution_method: "highest_weight_wins"
    
    validation_chain:
      - structural_integrity: "Input â†’ ZEMY â†’ Self-Interrogation â†’ Correction â†’ Codegen"
      - drift_detection_points: ["Input_to_ZEMY", "Self_Interrogation", "ZEMY_to_Codegen"]
      - rollback_triggers: ["threshold_breach", "structural_violation", "interrogation_failure"]
      - escalation_method: "Progressive Correction Scaling with Self-Analysis"

  execution_state_machine:
    states:
      - "INITIATION_TRIGGERED"
      - "INPUT_PROCESSED"
      - "INITIAL_IMPLEMENTATION_GENERATED"
      - "SELF_INTERROGATION_ACTIVE"
      - "VIOLATION_ANALYSIS_ACTIVE"
      - "SELF_CORRECTION_CYCLE"
      - "VALIDATION_ACTIVE"
      - "REFINEMENT_CYCLE"
      - "EXECUTION_LOCKED"
      - "CODEGEN_READY"

    transitions:
      - from: "INPUT_PROCESSED"
        to: "INITIAL_IMPLEMENTATION_GENERATED"
        condition: "requirements extracted and initial code generated"
        action: "proceed to self-interrogation"

      - from: "INITIAL_IMPLEMENTATION_GENERATED"
        to: "SELF_INTERROGATION_ACTIVE"
        condition: "implementation ready for analysis"
        action: "execute all self-interrogation prompts"

      - from: "SELF_INTERROGATION_ACTIVE"
        to: "VIOLATION_ANALYSIS_ACTIVE"
        condition: "weight_score > threshold detected"
        action: "begin violation analysis and explanation"

      - from: "SELF_INTERROGATION_ACTIVE"
        to: "EXECUTION_LOCKED"
        condition: "all weight_scores <= thresholds"
        action: "lock execution mapping - compliance achieved"

      - from: "VIOLATION_ANALYSIS_ACTIVE"
        to: "SELF_CORRECTION_CYCLE"
        condition: "violations analyzed and correction plan generated"
        action: "regenerate implementation with corrections"

      - from: "SELF_CORRECTION_CYCLE"
        to: "SELF_INTERROGATION_ACTIVE"
        condition: "corrected implementation generated"
        action: "re-interrogate corrected implementation"

      - from: "EXECUTION_LOCKED"
        to: "CODEGEN_READY"
        condition: "final validation pass completed"
        action: "transition to structured code generation"

  validation_schema:
    required_fields:
      - "execution_finalized"
      - "iteration_tracking.cycle_count"
      - "validation_checkpoints[].weight_score"
      - "validation_checkpoints[].threshold"
      - "validation_checkpoints[].self_interrogation_prompts"
    
    structural_rules:
      - "weight_score must be numeric"
      - "threshold must be less than weight_score for violations"
      - "execution_finalized must be boolean"
      - "self_interrogation_prompts must be array of strings"
      - "violation_scoring must define point assignments"

  execution_constraints:
    enforcement:
      self_interrogation_integrity:
        rule: "Agent must honestly answer all self-interrogation prompts"
        validation: "Responses must reflect actual implementation analysis"
        correction: "Re-execute interrogation with emphasis on honest self-assessment"
        weight_score: 0.0
        threshold: 2.0

      violation_acknowledgment:
        rule: "Agent must explicitly acknowledge and explain violations"
        validation: "Violation explanations must be specific and actionable"
        correction: "Require detailed violation analysis before correction"
        weight_score: 0.0
        threshold: 2.0

      corrective_implementation:
        rule: "Corrected implementations must address all identified violations"
        validation: "New implementation must score below thresholds on re-interrogation"
        correction: "Repeat correction cycle until compliance achieved"
        weight_score: 0.0
        threshold: 1.0

  final_output:
    deliverable: "Compliance-validated ZEMY execution mapping with self-interrogation audit trail"
    compliance_status: "Pending validation enforcement through self-interrogation cycles"